This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
public/
  vite.svg
src/
  assets/
    react.svg
  components/
    PostDetail.tsx
    PostFeed.tsx
    SettingsModal.tsx
    WReddit.tsx
  utils/
    index.ts
    storage.ts
  App.tsx
  index.css
  main.tsx
  types.ts
  vite-env.d.ts
workers/
  reddit-api/
    .wrangler/
      tmp/
        bundle-sQPtvw/
          checked-fetch.js
          middleware-insertion-facade.js
          middleware-loader.entry.ts
          strip-cf-connecting-ip-header.js
        dev-Z3v03r/
          index.js
          index.js.map
    src/
      index.ts
    package.json
    tsconfig.json
    wrangler.toml
.env.example
.gitignore
eslint.config.js
index.html
package.json
README.md
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/components/PostDetail.tsx">
import { useState, useEffect } from "react";
import {
  ArrowLeft,
  Share,
  Bookmark,
  ArrowUp,
  MessageCircle,
  ExternalLink,
  RefreshCw,
} from "lucide-react";
import { formatTimeAgo, formatScore, getHighQualityImage } from "../utils";
import type { Child, RedditComment, RedditPost } from "../types";

interface PostDetailProps {
  post: RedditPost;
  onBack: () => void;
}

export default function PostDetail({ post, onBack }: PostDetailProps) {
  const [comments, setComments] = useState<RedditComment[]>([]);
  const [loadingComments, setLoadingComments] = useState(true);
  const [showFullText, setShowFullText] = useState(false);

  // Fetch comments from Reddit API
  useEffect(() => {
    const fetchComments = async () => {
      try {
        setLoadingComments(true);
        const response = await fetch(
          `https://www.reddit.com${post.permalink}.json`
        );
        if (response.ok) {
          const data = await response.json();
          if (data && data[1] && data[1].data && data[1].data.children) {
            const commentData = data[1].data.children
              .filter((child: Child) => child.kind === "t1")
              .map((child: Child) => child.data);
            setComments(commentData);
          }
        }
      } catch (error) {
        console.error("Failed to fetch comments:", error);
      } finally {
        setLoadingComments(false);
      }
    };

    fetchComments();
  }, [post.permalink]);

  const imageUrl = getHighQualityImage(post);

  return (
    <div className="min-h-screen bg-black text-white">
      {/* Header */}
      <header className="sticky top-0 bg-black/90 backdrop-blur-md border-b border-gray-800 z-10">
        <div className="flex items-center justify-between p-3">
          <button
            onClick={onBack}
            className="p-2 text-gray-400 hover:text-white transition-colors rounded-full hover:bg-gray-800"
          >
            <ArrowLeft size={22} />
          </button>
          <h1 className="text-lg font-medium text-white flex-1 text-center mx-4 truncate">
            r/{post.subreddit}
          </h1>
          <div className="flex items-center gap-1">
            <button className="p-2 text-gray-400 hover:text-white transition-colors rounded-full hover:bg-gray-800">
              <Share size={20} />
            </button>
            <button className="p-2 text-gray-400 hover:text-white transition-colors rounded-full hover:bg-gray-800">
              <Bookmark size={20} />
            </button>
          </div>
        </div>
      </header>

      <div className="pb-6">
        {/* Post Header */}
        <div className="flex items-center justify-between p-3 border-b border-gray-900">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-gradient-to-br from-orange-500 to-red-500 rounded-full flex items-center justify-center">
              <span className="text-white font-bold">
                {post.subreddit.charAt(0).toUpperCase()}
              </span>
            </div>
            <div>
              <div className="text-white font-medium">r/{post.subreddit}</div>
              <div className="text-gray-500 text-sm">
                u/{post.author} • {formatTimeAgo(post.created_utc)}
              </div>
            </div>
          </div>
          <div className="flex items-center text-orange-400">
            <ArrowUp size={18} />
            <span className="text-sm font-medium ml-1">
              {formatScore(post.score)}
            </span>
          </div>
        </div>

        {/* Post Title */}
        <div className="p-3">
          <h1 className="text-white font-medium text-lg leading-tight">
            {post.title}
          </h1>
        </div>

        {/* Post Image */}
        {imageUrl && (
          <div className="w-full">
            <img
              src={imageUrl}
              alt="Post content"
              className="w-full object-contain max-h-screen"
            />
          </div>
        )}

        {/* Post Text */}
        {post.selftext && (
          <div className="p-3 border-b border-gray-900">
            <div className="text-gray-300 text-sm leading-relaxed whitespace-pre-wrap">
              {showFullText || post.selftext.length <= 300
                ? post.selftext
                : `${post.selftext.slice(0, 300)}...`}
            </div>
            {post.selftext.length > 300 && (
              <button
                onClick={() => setShowFullText(!showFullText)}
                className="text-orange-500 text-sm mt-2 hover:text-orange-400"
              >
                {showFullText ? "Show less" : "Show more"}
              </button>
            )}
          </div>
        )}

        {/* Action Bar */}
        <div className="flex items-center justify-between p-3 border-b border-gray-900">
          <div className="flex items-center gap-6">
            <div className="flex items-center gap-2 text-gray-400">
              <MessageCircle size={22} />
              <span className="text-sm">{post.num_comments} comments</span>
            </div>
            <a
              href={`https://reddit.com${post.permalink}`}
              target="_blank"
              rel="noopener noreferrer"
              className="flex items-center gap-2 text-gray-400 hover:text-white transition-colors"
            >
              <ExternalLink size={20} />
              <span className="text-sm">Reddit</span>
            </a>
            {post.url !== `https://reddit.com${post.permalink}` && (
              <a
                href={post.url}
                target="_blank"
                rel="noopener noreferrer"
                className="flex items-center gap-2 text-gray-400 hover:text-white transition-colors"
              >
                <ExternalLink size={20} />
                <span className="text-sm">Source</span>
              </a>
            )}
          </div>
        </div>

        {/* Comments Section */}
        <div className="p-3">
          <h2 className="text-white font-medium text-lg mb-4">
            Comments ({post.num_comments})
          </h2>

          {loadingComments ? (
            <div className="flex justify-center py-8">
              <RefreshCw size={24} className="animate-spin text-orange-500" />
            </div>
          ) : comments.length > 0 ? (
            <div className="space-y-4">
              {comments.slice(0, 10).map((comment) => (
                <div
                  key={comment.id}
                  className="border-l-2 border-gray-800 pl-3"
                >
                  <div className="flex items-center gap-2 mb-2">
                    <span className="text-orange-500 font-medium text-sm">
                      u/{comment.author}
                    </span>
                    <span className="text-gray-500 text-xs">•</span>
                    <span className="text-gray-500 text-xs">
                      {formatTimeAgo(comment.created_utc)}
                    </span>
                    <span className="text-gray-500 text-xs">•</span>
                    <span className="text-gray-500 text-xs">
                      {formatScore(comment.score)} points
                    </span>
                  </div>
                  <div className="text-gray-300 text-sm leading-relaxed whitespace-pre-wrap">
                    {comment.body}
                  </div>
                </div>
              ))}
              {comments.length > 10 && (
                <div className="text-center py-4">
                  <a
                    href={`https://reddit.com${post.permalink}`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-orange-500 hover:text-orange-400 text-sm"
                  >
                    View all {post.num_comments} comments on Reddit
                  </a>
                </div>
              )}
            </div>
          ) : (
            <div className="text-gray-500 text-center py-8">
              No comments yet. Be the first to comment on Reddit!
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/PostFeed.tsx">
import { ArrowUp, MessageCircle, ExternalLink } from "lucide-react";
import { formatTimeAgo, formatScore } from "../utils";
import type { RedditPost } from "../types";

interface PostFeedProps {
  posts: RedditPost[];
  onPostClick: (post: RedditPost) => void;
}

export default function PostFeed({ posts, onPostClick }: PostFeedProps) {
  return (
    <div className="space-y-0">
      {posts.map((post) => (
        <article
          key={post.id}
          className="bg-black border-b border-gray-900 cursor-pointer"
          onClick={() => onPostClick(post)}
        >
          {/* Post Header */}
          <div className="flex items-center justify-between p-3">
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 bg-gradient-to-br from-orange-500 to-red-500 rounded-full flex items-center justify-center">
                <span className="text-white font-bold text-sm">
                  {post.subreddit.charAt(0).toUpperCase()}
                </span>
              </div>
              <div>
                <div className="text-white font-medium text-sm">
                  r/{post.subreddit}
                </div>
                <div className="text-gray-500 text-xs">
                  u/{post.author} • {formatTimeAgo(post.created_utc)}
                </div>
              </div>
            </div>
            <div className="flex items-center text-gray-400">
              <ArrowUp size={16} className="text-gray-500" />
              <span className="text-xs font-medium ml-1">
                {formatScore(post.score)}
              </span>
            </div>
          </div>

          {/* Post Content */}
          <div className="px-0">
            {/* Title */}
            <div className="px-3 mb-2">
              <h2 className="text-white font-medium leading-tight text-sm">
                {post.title}
              </h2>
            </div>

            {/* Image/Media */}
            {post.thumbnail && (
              <div className="w-full">
                <img
                  src={post.thumbnail}
                  alt="Post content"
                  className="w-full object-cover max-h-96"
                  style={{
                    aspectRatio: "auto",
                  }}
                />
              </div>
            )}

            {/* Self text */}
            {post.selftext && (
              <div className="px-3 mt-2">
                <p className="text-gray-300 text-sm leading-relaxed">
                  {post.selftext.length > 200
                    ? `${post.selftext.slice(0, 200)}...`
                    : post.selftext}
                </p>
              </div>
            )}

            {/* Action Bar */}
            <div className="flex items-center justify-between px-3 py-3">
              <div className="flex items-center gap-4">
                <button className="flex items-center gap-2 text-gray-400 hover:text-white transition-colors">
                  <MessageCircle size={20} />
                  <span className="text-sm">{post.num_comments}</span>
                </button>
                <a
                  href={`https://reddit.com${post.permalink}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="flex items-center gap-2 text-gray-400 hover:text-white transition-colors"
                  onClick={(e) => e.stopPropagation()}
                >
                  <ExternalLink size={20} />
                  <span className="text-sm">Reddit</span>
                </a>
                {post.url !== `https://reddit.com${post.permalink}` && (
                  <a
                    href={post.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="flex items-center gap-2 text-gray-400 hover:text-white transition-colors"
                    onClick={(e) => e.stopPropagation()}
                  >
                    <ExternalLink size={20} />
                    <span className="text-sm">Link</span>
                  </a>
                )}
              </div>
            </div>
          </div>
        </article>
      ))}
    </div>
  );
}
</file>

<file path="src/components/SettingsModal.tsx">
import { Heart, X, Plus } from "lucide-react";
import { addToFilterList, removeFromFilterList } from "../utils/storage";
import type { FilterOptions } from "../types";

interface SettingsModalProps {
  isOpen: boolean;
  onClose: () => void;
  filters: FilterOptions;
  onFiltersChange: (filters: FilterOptions) => void;
}

export default function SettingsModal({
  isOpen,
  onClose,
  filters,
  onFiltersChange,
}: SettingsModalProps) {
  if (!isOpen) return null;

  const handleAddToList = (
    listType: keyof FilterOptions,
    value: string,
    inputElement: HTMLInputElement
  ) => {
    const currentList = filters[listType] as string[];
    const newList = addToFilterList(currentList, value);

    if (newList !== currentList) {
      onFiltersChange({
        ...filters,
        [listType]: newList,
      });
      inputElement.value = "";
    }
  };

  const handleRemoveFromList = (
    listType: keyof FilterOptions,
    item: string
  ) => {
    const currentList = filters[listType] as string[];
    const newList = removeFromFilterList(currentList, item);

    onFiltersChange({
      ...filters,
      [listType]: newList,
    });
  };

  return (
    <div className="fixed inset-0 bg-black/70 z-50 flex items-center justify-center p-4">
      <div className="bg-gray-900 rounded-2xl w-full max-w-sm max-h-[85vh] overflow-y-auto">
        <div className="p-4 border-b border-gray-800 flex items-center justify-between sticky top-0 bg-gray-900">
          <h2 className="text-lg font-semibold">Settings</h2>
          <button
            onClick={onClose}
            className="p-1 rounded-full hover:bg-gray-800 transition-colors"
          >
            <X size={20} />
          </button>
        </div>

        <div className="p-4 space-y-6">
          {/* Favorite Subreddits */}
          <div>
            <h3 className="font-medium mb-3 flex items-center gap-2 text-orange-400">
              <Heart size={16} className="text-red-500" />
              Favorite Subreddits
            </h3>
            <div className="space-y-3">
              <div className="flex gap-2">
                <input
                  type="text"
                  placeholder="Add subreddit..."
                  className="flex-1 px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-orange-500 text-sm"
                  onKeyPress={(e) => {
                    if (e.key === "Enter") {
                      handleAddToList(
                        "favoriteSubreddits",
                        e.currentTarget.value,
                        e.currentTarget
                      );
                    }
                  }}
                />
                <button
                  onClick={(e) => {
                    const input = e.currentTarget
                      .previousElementSibling as HTMLInputElement;
                    handleAddToList("favoriteSubreddits", input.value, input);
                  }}
                  className="px-3 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors"
                >
                  <Plus size={16} />
                </button>
              </div>
              <div className="flex flex-wrap gap-2">
                {filters.favoriteSubreddits.map((sub) => (
                  <span
                    key={sub}
                    className="inline-flex items-center gap-1 px-2 py-1 bg-red-600/20 border border-red-600/40 text-red-400 rounded-lg text-sm"
                  >
                    r/{sub}
                    <button
                      onClick={() =>
                        handleRemoveFromList("favoriteSubreddits", sub)
                      }
                      className="hover:text-red-300 transition-colors"
                    >
                      <X size={12} />
                    </button>
                  </span>
                ))}
              </div>
            </div>
          </div>

          {/* Blocked Subreddits */}
          <div>
            <h3 className="font-medium mb-3 text-gray-300">
              Blocked Subreddits
            </h3>
            <div className="space-y-3">
              <div className="flex gap-2">
                <input
                  type="text"
                  placeholder="Block subreddit..."
                  className="flex-1 px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-orange-500 text-sm"
                  onKeyPress={(e) => {
                    if (e.key === "Enter") {
                      handleAddToList(
                        "blockedSubreddits",
                        e.currentTarget.value,
                        e.currentTarget
                      );
                    }
                  }}
                />
                <button
                  onClick={(e) => {
                    const input = e.currentTarget
                      .previousElementSibling as HTMLInputElement;
                    handleAddToList("blockedSubreddits", input.value, input);
                  }}
                  className="px-3 py-2 bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition-colors"
                >
                  <Plus size={16} />
                </button>
              </div>
              <div className="flex flex-wrap gap-2">
                {filters.blockedSubreddits.map((sub) => (
                  <span
                    key={sub}
                    className="inline-flex items-center gap-1 px-2 py-1 bg-gray-700/50 border border-gray-600 text-gray-300 rounded-lg text-sm"
                  >
                    r/{sub}
                    <button
                      onClick={() =>
                        handleRemoveFromList("blockedSubreddits", sub)
                      }
                      className="hover:text-gray-200 transition-colors"
                    >
                      <X size={12} />
                    </button>
                  </span>
                ))}
              </div>
            </div>
          </div>

          {/* Keyword Filters */}
          <div>
            <h3 className="font-medium mb-3 text-gray-300">Keyword Filters</h3>
            <div className="space-y-3">
              <div className="flex gap-2">
                <input
                  type="text"
                  placeholder="Block keyword..."
                  className="flex-1 px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-orange-500 text-sm"
                  onKeyPress={(e) => {
                    if (e.key === "Enter") {
                      handleAddToList(
                        "blockedKeywords",
                        e.currentTarget.value,
                        e.currentTarget
                      );
                    }
                  }}
                />
                <button
                  onClick={(e) => {
                    const input = e.currentTarget
                      .previousElementSibling as HTMLInputElement;
                    handleAddToList("blockedKeywords", input.value, input);
                  }}
                  className="px-3 py-2 bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition-colors"
                >
                  <Plus size={16} />
                </button>
              </div>
              <div className="flex flex-wrap gap-2">
                {filters.blockedKeywords.map((keyword) => (
                  <span
                    key={keyword}
                    className="inline-flex items-center gap-1 px-2 py-1 bg-gray-700/50 border border-gray-600 text-gray-300 rounded-lg text-sm"
                  >
                    {keyword}
                    <button
                      onClick={() =>
                        handleRemoveFromList("blockedKeywords", keyword)
                      }
                      className="hover:text-gray-200 transition-colors"
                    >
                      <X size={12} />
                    </button>
                  </span>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/utils/index.ts">
export const formatTimeAgo = (timestamp: number): string => {
  const now = Date.now();
  const diff = now - timestamp * 1000;
  const hours = Math.floor(diff / (1000 * 60 * 60));
  const days = Math.floor(hours / 24);

  if (days > 0) return `${days}d ago`;
  if (hours > 0) return `${hours}h ago`;
  return "Just now";
};

export const formatScore = (score: number): string => {
  if (score >= 1000) {
    return `${(score / 1000).toFixed(1)}k`;
  }
  return score.toString();
};

export const getHighQualityImage = (post: {
  preview?: {
    images?: Array<{
      source: { url: string; width: number; height: number };
    }>;
  };
  thumbnail?: string;
}): string | null => {
  if (post.preview?.images?.[0]?.source) {
    return post.preview.images[0].source.url.replace(/&amp;/g, "&");
  }

  if (
    post.thumbnail &&
    post.thumbnail !== "self" &&
    post.thumbnail !== "default" &&
    post.thumbnail !== "nsfw" &&
    post.thumbnail !== "spoiler"
  ) {
    return post.thumbnail;
  }

  return null;
};
</file>

<file path="src/utils/storage.ts">
import type { FilterOptions } from "../types";

const STORAGE_KEYS = {
  FILTERS: "wreddit-filters",
  SUBREDDIT: "wreddit-subreddit",
  SORT: "wreddit-sort",
} as const;

// Check if localStorage is available
const isLocalStorageAvailable = (): boolean | Storage => {
  return typeof window !== "undefined" && window.localStorage;
};

// Filter operations
export const getFilters = (): FilterOptions => {
  if (!isLocalStorageAvailable()) {
    return {
      blockedSubreddits: [],
      favoriteSubreddits: [],
      keywords: [],
      blockedKeywords: [],
    };
  }

  try {
    const saved = localStorage.getItem(STORAGE_KEYS.FILTERS);
    return saved
      ? JSON.parse(saved)
      : {
          blockedSubreddits: [],
          favoriteSubreddits: [],
          keywords: [],
          blockedKeywords: [],
        };
  } catch (error) {
    console.error("Error parsing filters from localStorage:", error);
    return {
      blockedSubreddits: [],
      favoriteSubreddits: [],
      keywords: [],
      blockedKeywords: [],
    };
  }
};

export const saveFilters = (filters: FilterOptions): void => {
  if (!isLocalStorageAvailable()) return;

  try {
    localStorage.setItem(STORAGE_KEYS.FILTERS, JSON.stringify(filters));
  } catch (error) {
    console.error("Error saving filters to localStorage:", error);
  }
};

// Subreddit operations
export const getSubreddit = (): string => {
  if (!isLocalStorageAvailable()) return "all";

  return localStorage.getItem(STORAGE_KEYS.SUBREDDIT) || "all";
};

export const saveSubreddit = (subreddit: string): void => {
  if (!isLocalStorageAvailable()) return;

  localStorage.setItem(STORAGE_KEYS.SUBREDDIT, subreddit);
};

// Sort operations
export const getSort = (): string => {
  if (!isLocalStorageAvailable()) return "hot";

  return localStorage.getItem(STORAGE_KEYS.SORT) || "hot";
};

export const saveSort = (sort: string): void => {
  if (!isLocalStorageAvailable()) return;

  localStorage.setItem(STORAGE_KEYS.SORT, sort);
};

// Utility functions for filter management
export const addToFilterList = (list: string[], item: string): string[] => {
  const trimmedItem = item.toLowerCase().trim();
  if (trimmedItem && !list.includes(trimmedItem)) {
    return [...list, trimmedItem];
  }
  return list;
};

export const removeFromFilterList = (
  list: string[],
  item: string
): string[] => {
  return list.filter((i) => i !== item);
};
</file>

<file path="src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="src/types.ts">
export interface RedditPost {
  id: string;
  title: string;
  author: string;
  subreddit: string;
  url: string;
  permalink: string;
  score: number;
  num_comments: number;
  created_utc: number;
  thumbnail?: string;
  preview?: {
    images?: Array<{
      source: { url: string; width: number; height: number };
    }>;
  };
  selftext?: string;
  is_video: boolean;
}

export interface Child {
  kind: string;
  data: [];
}

export interface FilterOptions {
  blockedSubreddits: string[];
  favoriteSubreddits: string[];
  keywords: string[];
  blockedKeywords: string[];
}

export interface RedditComment {
  id: string;
  author: string;
  body: string;
  score: number;
  created_utc: number;
  replies?: {
    data: {
      children: Array<{
        kind: string;
        data: RedditComment;
      }>;
    };
  };
}

export interface RedditResponse {
  data: {
    children: Array<{
      data: RedditPost;
    }>;
    after?: string;
  };
}

export interface PostsApiResponse {
  posts: RedditPost[];
  after?: string;
}
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="workers/reddit-api/.wrangler/tmp/bundle-sQPtvw/checked-fetch.js">
const urls = new Set();

function checkURL(request, init) {
	const url =
		request instanceof URL
			? request
			: new URL(
					(typeof request === "string"
						? new Request(request, init)
						: request
					).url
				);
	if (url.port && url.port !== "443" && url.protocol === "https:") {
		if (!urls.has(url.toString())) {
			urls.add(url.toString());
			console.warn(
				`WARNING: known issue with \`fetch()\` requests to custom HTTPS ports in published Workers:\n` +
					` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \`wrangler deploy\` command.\n`
			);
		}
	}
}

globalThis.fetch = new Proxy(globalThis.fetch, {
	apply(target, thisArg, argArray) {
		const [request, init] = argArray;
		checkURL(request, init);
		return Reflect.apply(target, thisArg, argArray);
	},
});
</file>

<file path="workers/reddit-api/.wrangler/tmp/bundle-sQPtvw/middleware-insertion-facade.js">
import worker, * as OTHER_EXPORTS from "/Users/willjones/projects/wreddit/workers/reddit-api/src/index.ts";
				import * as __MIDDLEWARE_0__ from "/Users/willjones/projects/wreddit/workers/reddit-api/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts";
import * as __MIDDLEWARE_1__ from "/Users/willjones/projects/wreddit/workers/reddit-api/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts";

				export * from "/Users/willjones/projects/wreddit/workers/reddit-api/src/index.ts";

				export const __INTERNAL_WRANGLER_MIDDLEWARE__ = [
					
					__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default
				]
				export default worker;
</file>

<file path="workers/reddit-api/.wrangler/tmp/bundle-sQPtvw/middleware-loader.entry.ts">
// This loads all middlewares exposed on the middleware object and then starts
// the invocation chain. The big idea is that we can add these to the middleware
// export dynamically through wrangler, or we can potentially let users directly
// add them as a sort of "plugin" system.

import ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from "/Users/willjones/projects/wreddit/workers/reddit-api/.wrangler/tmp/bundle-sQPtvw/middleware-insertion-facade.js";
import { __facade_invoke__, __facade_register__, Dispatcher } from "/Users/willjones/projects/wreddit/workers/reddit-api/node_modules/wrangler/templates/middleware/common.ts";
import type { WorkerEntrypointConstructor } from "/Users/willjones/projects/wreddit/workers/reddit-api/.wrangler/tmp/bundle-sQPtvw/middleware-insertion-facade.js";

// Preserve all the exports from the worker
export * from "/Users/willjones/projects/wreddit/workers/reddit-api/.wrangler/tmp/bundle-sQPtvw/middleware-insertion-facade.js";

class __Facade_ScheduledController__ implements ScheduledController {
	readonly #noRetry: ScheduledController["noRetry"];

	constructor(
		readonly scheduledTime: number,
		readonly cron: string,
		noRetry: ScheduledController["noRetry"]
	) {
		this.#noRetry = noRetry;
	}

	noRetry() {
		if (!(this instanceof __Facade_ScheduledController__)) {
			throw new TypeError("Illegal invocation");
		}
		// Need to call native method immediately in case uncaught error thrown
		this.#noRetry();
	}
}

function wrapExportedHandler(worker: ExportedHandler): ExportedHandler {
	// If we don't have any middleware defined, just return the handler as is
	if (
		__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||
		__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0
	) {
		return worker;
	}
	// Otherwise, register all middleware once
	for (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {
		__facade_register__(middleware);
	}

	const fetchDispatcher: ExportedHandlerFetchHandler = function (
		request,
		env,
		ctx
	) {
		if (worker.fetch === undefined) {
			throw new Error("Handler does not export a fetch() function.");
		}
		return worker.fetch(request, env, ctx);
	};

	return {
		...worker,
		fetch(request, env, ctx) {
			const dispatcher: Dispatcher = function (type, init) {
				if (type === "scheduled" && worker.scheduled !== undefined) {
					const controller = new __Facade_ScheduledController__(
						Date.now(),
						init.cron ?? "",
						() => {}
					);
					return worker.scheduled(controller, env, ctx);
				}
			};
			return __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);
		},
	};
}

function wrapWorkerEntrypoint(
	klass: WorkerEntrypointConstructor
): WorkerEntrypointConstructor {
	// If we don't have any middleware defined, just return the handler as is
	if (
		__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||
		__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0
	) {
		return klass;
	}
	// Otherwise, register all middleware once
	for (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {
		__facade_register__(middleware);
	}

	// `extend`ing `klass` here so other RPC methods remain callable
	return class extends klass {
		#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (
			request,
			env,
			ctx
		) => {
			this.env = env;
			this.ctx = ctx;
			if (super.fetch === undefined) {
				throw new Error("Entrypoint class does not define a fetch() function.");
			}
			return super.fetch(request);
		};

		#dispatcher: Dispatcher = (type, init) => {
			if (type === "scheduled" && super.scheduled !== undefined) {
				const controller = new __Facade_ScheduledController__(
					Date.now(),
					init.cron ?? "",
					() => {}
				);
				return super.scheduled(controller);
			}
		};

		fetch(request: Request<unknown, IncomingRequestCfProperties>) {
			return __facade_invoke__(
				request,
				this.env,
				this.ctx,
				this.#dispatcher,
				this.#fetchDispatcher
			);
		}
	};
}

let WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;
if (typeof ENTRY === "object") {
	WRAPPED_ENTRY = wrapExportedHandler(ENTRY);
} else if (typeof ENTRY === "function") {
	WRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);
}
export default WRAPPED_ENTRY;
</file>

<file path="workers/reddit-api/.wrangler/tmp/bundle-sQPtvw/strip-cf-connecting-ip-header.js">
function stripCfConnectingIPHeader(input, init) {
	const request = new Request(input, init);
	request.headers.delete("CF-Connecting-IP");
	return request;
}

globalThis.fetch = new Proxy(globalThis.fetch, {
	apply(target, thisArg, argArray) {
		return Reflect.apply(target, thisArg, [
			stripCfConnectingIPHeader.apply(null, argArray),
		]);
	},
});
</file>

<file path="workers/reddit-api/.wrangler/tmp/dev-Z3v03r/index.js">
var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// .wrangler/tmp/bundle-sQPtvw/checked-fetch.js
var urls = /* @__PURE__ */ new Set();
function checkURL(request, init) {
  const url = request instanceof URL ? request : new URL(
    (typeof request === "string" ? new Request(request, init) : request).url
  );
  if (url.port && url.port !== "443" && url.protocol === "https:") {
    if (!urls.has(url.toString())) {
      urls.add(url.toString());
      console.warn(
        `WARNING: known issue with \`fetch()\` requests to custom HTTPS ports in published Workers:
 - ${url.toString()} - the custom port will be ignored when the Worker is published using the \`wrangler deploy\` command.
`
      );
    }
  }
}
__name(checkURL, "checkURL");
globalThis.fetch = new Proxy(globalThis.fetch, {
  apply(target, thisArg, argArray) {
    const [request, init] = argArray;
    checkURL(request, init);
    return Reflect.apply(target, thisArg, argArray);
  }
});

// .wrangler/tmp/bundle-sQPtvw/strip-cf-connecting-ip-header.js
function stripCfConnectingIPHeader(input, init) {
  const request = new Request(input, init);
  request.headers.delete("CF-Connecting-IP");
  return request;
}
__name(stripCfConnectingIPHeader, "stripCfConnectingIPHeader");
globalThis.fetch = new Proxy(globalThis.fetch, {
  apply(target, thisArg, argArray) {
    return Reflect.apply(target, thisArg, [
      stripCfConnectingIPHeader.apply(null, argArray)
    ]);
  }
});

// src/index.ts
var src_default = {
  async fetch(request) {
    const corsHeaders = {
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
      "Access-Control-Allow-Headers": "Content-Type"
    };
    if (request.method === "OPTIONS") {
      return new Response(null, { headers: corsHeaders });
    }
    const url = new URL(request.url);
    const path = url.pathname;
    try {
      if (path === "/api/posts") {
        return await handleGetPosts(request, corsHeaders);
      } else if (path === "/api/subreddit") {
        return await handleGetSubreddit(request, corsHeaders);
      }
      return new Response("Not found", { status: 404, headers: corsHeaders });
    } catch (error) {
      console.error("Worker error:", error);
      return new Response("Internal server error", {
        status: 500,
        headers: corsHeaders
      });
    }
  }
};
async function handleGetPosts(request, corsHeaders) {
  const url = new URL(request.url);
  const subreddit = url.searchParams.get("subreddit") || "all";
  const sort = url.searchParams.get("sort") || "hot";
  const limit = url.searchParams.get("limit") || "25";
  const after = url.searchParams.get("after") || "";
  let filterOptions = {};
  if (request.method === "POST") {
    try {
      const body = await request.json();
      filterOptions = body;
    } catch (error) {
      console.error("Error parsing request body:", error);
    }
  }
  let redditUrl = `https://www.reddit.com/r/${subreddit}/${sort}.json?limit=${limit}`;
  if (after) {
    redditUrl += `&after=${after}`;
  }
  const response = await fetch(redditUrl, {
    headers: {
      "User-Agent": "WReddit/1.0.0"
    }
  });
  if (!response.ok) {
    throw new Error(`Reddit API error: ${response.status}`);
  }
  const data = await response.json();
  const filteredPosts = filterPosts(
    data.data.children.map((child) => child.data),
    filterOptions
  );
  const result = {
    posts: filteredPosts,
    after: data.data.after
  };
  return new Response(JSON.stringify(result), {
    headers: {
      "Content-Type": "application/json",
      ...corsHeaders
    }
  });
}
__name(handleGetPosts, "handleGetPosts");
async function handleGetSubreddit(request, corsHeaders) {
  const url = new URL(request.url);
  const subredditName = url.searchParams.get("name");
  if (!subredditName) {
    return new Response("Subreddit name is required", {
      status: 400,
      headers: corsHeaders
    });
  }
  const response = await fetch(
    `https://www.reddit.com/r/${subredditName}/about.json`,
    {
      headers: {
        "User-Agent": "WReddit/1.0.0"
      }
    }
  );
  if (!response.ok) {
    return new Response("Subreddit not found", {
      status: 404,
      headers: corsHeaders
    });
  }
  const data = await response.json();
  return new Response(JSON.stringify(data.data), {
    headers: {
      "Content-Type": "application/json",
      ...corsHeaders
    }
  });
}
__name(handleGetSubreddit, "handleGetSubreddit");
function filterPosts(posts, options) {
  return posts.filter((post) => {
    if (options.blockedSubreddits?.includes(post.subreddit.toLowerCase())) {
      return false;
    }
    if (options.favoriteSubreddits && options.favoriteSubreddits.length > 0) {
      if (!options.favoriteSubreddits.includes(post.subreddit.toLowerCase())) {
        return false;
      }
    }
    if (options.blockedKeywords && options.blockedKeywords.length > 0) {
      const postText = `${post.title} ${post.selftext || ""}`.toLowerCase();
      const hasBlockedKeyword = options.blockedKeywords.some(
        (keyword) => postText.includes(keyword.toLowerCase())
      );
      if (hasBlockedKeyword) {
        return false;
      }
    }
    if (options.keywords && options.keywords.length > 0) {
      const postText = `${post.title} ${post.selftext || ""}`.toLowerCase();
      const hasKeyword = options.keywords.some(
        (keyword) => postText.includes(keyword.toLowerCase())
      );
      if (!hasKeyword) {
        return false;
      }
    }
    return true;
  });
}
__name(filterPosts, "filterPosts");

// node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts
var drainBody = /* @__PURE__ */ __name(async (request, env, _ctx, middlewareCtx) => {
  try {
    return await middlewareCtx.next(request, env);
  } finally {
    try {
      if (request.body !== null && !request.bodyUsed) {
        const reader = request.body.getReader();
        while (!(await reader.read()).done) {
        }
      }
    } catch (e) {
      console.error("Failed to drain the unused request body.", e);
    }
  }
}, "drainBody");
var middleware_ensure_req_body_drained_default = drainBody;

// node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts
function reduceError(e) {
  return {
    name: e?.name,
    message: e?.message ?? String(e),
    stack: e?.stack,
    cause: e?.cause === void 0 ? void 0 : reduceError(e.cause)
  };
}
__name(reduceError, "reduceError");
var jsonError = /* @__PURE__ */ __name(async (request, env, _ctx, middlewareCtx) => {
  try {
    return await middlewareCtx.next(request, env);
  } catch (e) {
    const error = reduceError(e);
    return Response.json(error, {
      status: 500,
      headers: { "MF-Experimental-Error-Stack": "true" }
    });
  }
}, "jsonError");
var middleware_miniflare3_json_error_default = jsonError;

// .wrangler/tmp/bundle-sQPtvw/middleware-insertion-facade.js
var __INTERNAL_WRANGLER_MIDDLEWARE__ = [
  middleware_ensure_req_body_drained_default,
  middleware_miniflare3_json_error_default
];
var middleware_insertion_facade_default = src_default;

// node_modules/wrangler/templates/middleware/common.ts
var __facade_middleware__ = [];
function __facade_register__(...args) {
  __facade_middleware__.push(...args.flat());
}
__name(__facade_register__, "__facade_register__");
function __facade_invokeChain__(request, env, ctx, dispatch, middlewareChain) {
  const [head, ...tail] = middlewareChain;
  const middlewareCtx = {
    dispatch,
    next(newRequest, newEnv) {
      return __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);
    }
  };
  return head(request, env, ctx, middlewareCtx);
}
__name(__facade_invokeChain__, "__facade_invokeChain__");
function __facade_invoke__(request, env, ctx, dispatch, finalMiddleware) {
  return __facade_invokeChain__(request, env, ctx, dispatch, [
    ...__facade_middleware__,
    finalMiddleware
  ]);
}
__name(__facade_invoke__, "__facade_invoke__");

// .wrangler/tmp/bundle-sQPtvw/middleware-loader.entry.ts
var __Facade_ScheduledController__ = class {
  constructor(scheduledTime, cron, noRetry) {
    this.scheduledTime = scheduledTime;
    this.cron = cron;
    this.#noRetry = noRetry;
  }
  #noRetry;
  noRetry() {
    if (!(this instanceof __Facade_ScheduledController__)) {
      throw new TypeError("Illegal invocation");
    }
    this.#noRetry();
  }
};
__name(__Facade_ScheduledController__, "__Facade_ScheduledController__");
function wrapExportedHandler(worker) {
  if (__INTERNAL_WRANGLER_MIDDLEWARE__ === void 0 || __INTERNAL_WRANGLER_MIDDLEWARE__.length === 0) {
    return worker;
  }
  for (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {
    __facade_register__(middleware);
  }
  const fetchDispatcher = /* @__PURE__ */ __name(function(request, env, ctx) {
    if (worker.fetch === void 0) {
      throw new Error("Handler does not export a fetch() function.");
    }
    return worker.fetch(request, env, ctx);
  }, "fetchDispatcher");
  return {
    ...worker,
    fetch(request, env, ctx) {
      const dispatcher = /* @__PURE__ */ __name(function(type, init) {
        if (type === "scheduled" && worker.scheduled !== void 0) {
          const controller = new __Facade_ScheduledController__(
            Date.now(),
            init.cron ?? "",
            () => {
            }
          );
          return worker.scheduled(controller, env, ctx);
        }
      }, "dispatcher");
      return __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);
    }
  };
}
__name(wrapExportedHandler, "wrapExportedHandler");
function wrapWorkerEntrypoint(klass) {
  if (__INTERNAL_WRANGLER_MIDDLEWARE__ === void 0 || __INTERNAL_WRANGLER_MIDDLEWARE__.length === 0) {
    return klass;
  }
  for (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {
    __facade_register__(middleware);
  }
  return class extends klass {
    #fetchDispatcher = (request, env, ctx) => {
      this.env = env;
      this.ctx = ctx;
      if (super.fetch === void 0) {
        throw new Error("Entrypoint class does not define a fetch() function.");
      }
      return super.fetch(request);
    };
    #dispatcher = (type, init) => {
      if (type === "scheduled" && super.scheduled !== void 0) {
        const controller = new __Facade_ScheduledController__(
          Date.now(),
          init.cron ?? "",
          () => {
          }
        );
        return super.scheduled(controller);
      }
    };
    fetch(request) {
      return __facade_invoke__(
        request,
        this.env,
        this.ctx,
        this.#dispatcher,
        this.#fetchDispatcher
      );
    }
  };
}
__name(wrapWorkerEntrypoint, "wrapWorkerEntrypoint");
var WRAPPED_ENTRY;
if (typeof middleware_insertion_facade_default === "object") {
  WRAPPED_ENTRY = wrapExportedHandler(middleware_insertion_facade_default);
} else if (typeof middleware_insertion_facade_default === "function") {
  WRAPPED_ENTRY = wrapWorkerEntrypoint(middleware_insertion_facade_default);
}
var middleware_loader_entry_default = WRAPPED_ENTRY;
export {
  __INTERNAL_WRANGLER_MIDDLEWARE__,
  middleware_loader_entry_default as default
};
//# sourceMappingURL=index.js.map
</file>

<file path="workers/reddit-api/.wrangler/tmp/dev-Z3v03r/index.js.map">
{
  "version": 3,
  "sources": ["../bundle-sQPtvw/checked-fetch.js", "../bundle-sQPtvw/strip-cf-connecting-ip-header.js", "../../../src/index.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-sQPtvw/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-sQPtvw/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/willjones/projects/wreddit/workers/reddit-api/.wrangler/tmp/dev-Z3v03r",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "interface RedditPost {\n  id: string;\n  title: string;\n  author: string;\n  subreddit: string;\n  url: string;\n  permalink: string;\n  score: number;\n  num_comments: number;\n  created_utc: number;\n  thumbnail?: string;\n  preview?: {\n    images?: Array<{\n      source: { url: string; width: number; height: number };\n    }>;\n  };\n  selftext?: string;\n  is_video: boolean;\n}\n\ninterface RedditResponse {\n  data: {\n    children: Array<{\n      data: RedditPost;\n    }>;\n    after?: string;\n  };\n}\n\ninterface FilterOptions {\n  blockedSubreddits?: string[];\n  favoriteSubreddits?: string[];\n  keywords?: string[];\n  blockedKeywords?: string[];\n}\n\nexport default {\n  async fetch(request: Request): Promise<Response> {\n    // Handle CORS\n    const corsHeaders = {\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS\",\n      \"Access-Control-Allow-Headers\": \"Content-Type\",\n    };\n\n    if (request.method === \"OPTIONS\") {\n      return new Response(null, { headers: corsHeaders });\n    }\n\n    const url = new URL(request.url);\n    const path = url.pathname;\n\n    try {\n      if (path === \"/api/posts\") {\n        return await handleGetPosts(request, corsHeaders);\n      } else if (path === \"/api/subreddit\") {\n        return await handleGetSubreddit(request, corsHeaders);\n      }\n\n      return new Response(\"Not found\", { status: 404, headers: corsHeaders });\n    } catch (error) {\n      console.error(\"Worker error:\", error);\n      return new Response(\"Internal server error\", {\n        status: 500,\n        headers: corsHeaders,\n      });\n    }\n  },\n};\n\nasync function handleGetPosts(\n  request: Request,\n  corsHeaders: Record<string, string>\n): Promise<Response> {\n  const url = new URL(request.url);\n  const subreddit = url.searchParams.get(\"subreddit\") || \"all\";\n  const sort = url.searchParams.get(\"sort\") || \"hot\";\n  const limit = url.searchParams.get(\"limit\") || \"25\";\n  const after = url.searchParams.get(\"after\") || \"\";\n\n  // Get filter options from request body or query params\n  let filterOptions: FilterOptions = {};\n  if (request.method === \"POST\") {\n    try {\n      const body = (await request.json()) as FilterOptions;\n      filterOptions = body;\n    } catch (error) {\n      // Fallback to query params if body parsing fails\n      console.error(\"Error parsing request body:\", error);\n    }\n  }\n\n  // Build Reddit API URL\n  let redditUrl = `https://www.reddit.com/r/${subreddit}/${sort}.json?limit=${limit}`;\n  if (after) {\n    redditUrl += `&after=${after}`;\n  }\n\n  // Fetch from Reddit API\n  const response = await fetch(redditUrl, {\n    headers: {\n      \"User-Agent\": \"WReddit/1.0.0\",\n    },\n  });\n\n  if (!response.ok) {\n    throw new Error(`Reddit API error: ${response.status}`);\n  }\n\n  const data: RedditResponse = await response.json();\n\n  // Filter posts based on user preferences\n  const filteredPosts = filterPosts(\n    data.data.children.map((child) => child.data),\n    filterOptions\n  );\n\n  const result = {\n    posts: filteredPosts,\n    after: data.data.after,\n  };\n\n  return new Response(JSON.stringify(result), {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...corsHeaders,\n    },\n  });\n}\n\nasync function handleGetSubreddit(\n  request: Request,\n  corsHeaders: Record<string, string>\n): Promise<Response> {\n  const url = new URL(request.url);\n  const subredditName = url.searchParams.get(\"name\");\n\n  if (!subredditName) {\n    return new Response(\"Subreddit name is required\", {\n      status: 400,\n      headers: corsHeaders,\n    });\n  }\n\n  // Fetch subreddit info\n  const response = await fetch(\n    `https://www.reddit.com/r/${subredditName}/about.json`,\n    {\n      headers: {\n        \"User-Agent\": \"WReddit/1.0.0\",\n      },\n    }\n  );\n\n  if (!response.ok) {\n    return new Response(\"Subreddit not found\", {\n      status: 404,\n      headers: corsHeaders,\n    });\n  }\n\n  const data = await response.json<\n    RedditResponse & { data: { children: Array<{ data: RedditPost }> } }\n  >();\n\n  return new Response(JSON.stringify(data.data), {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...corsHeaders,\n    },\n  });\n}\n\nfunction filterPosts(\n  posts: RedditPost[],\n  options: FilterOptions\n): RedditPost[] {\n  return posts.filter((post) => {\n    // Filter out blocked subreddits\n    if (options.blockedSubreddits?.includes(post.subreddit.toLowerCase())) {\n      return false;\n    }\n\n    // If favorite subreddits are specified, only show those\n    if (options.favoriteSubreddits && options.favoriteSubreddits.length > 0) {\n      if (!options.favoriteSubreddits.includes(post.subreddit.toLowerCase())) {\n        return false;\n      }\n    }\n\n    // Filter out posts with blocked keywords\n    if (options.blockedKeywords && options.blockedKeywords.length > 0) {\n      const postText = `${post.title} ${post.selftext || \"\"}`.toLowerCase();\n      const hasBlockedKeyword = options.blockedKeywords.some((keyword) =>\n        postText.includes(keyword.toLowerCase())\n      );\n      if (hasBlockedKeyword) {\n        return false;\n      }\n    }\n\n    // Filter for specific keywords (if specified)\n    if (options.keywords && options.keywords.length > 0) {\n      const postText = `${post.title} ${post.selftext || \"\"}`.toLowerCase();\n      const hasKeyword = options.keywords.some((keyword) =>\n        postText.includes(keyword.toLowerCase())\n      );\n      if (!hasKeyword) {\n        return false;\n      }\n    }\n\n    return true;\n  });\n}\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/willjones/projects/wreddit/workers/reddit-api/src/index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/willjones/projects/wreddit/workers/reddit-api/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/willjones/projects/wreddit/workers/reddit-api/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/willjones/projects/wreddit/workers/reddit-api/src/index.ts\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/willjones/projects/wreddit/workers/reddit-api/.wrangler/tmp/bundle-sQPtvw/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/willjones/projects/wreddit/workers/reddit-api/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/willjones/projects/wreddit/workers/reddit-api/.wrangler/tmp/bundle-sQPtvw/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/willjones/projects/wreddit/workers/reddit-api/.wrangler/tmp/bundle-sQPtvw/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
</file>

<file path="workers/reddit-api/src/index.ts">
interface RedditPost {
  id: string;
  title: string;
  author: string;
  subreddit: string;
  url: string;
  permalink: string;
  score: number;
  num_comments: number;
  created_utc: number;
  thumbnail?: string;
  preview?: {
    images?: Array<{
      source: { url: string; width: number; height: number };
    }>;
  };
  selftext?: string;
  is_video: boolean;
}

interface RedditResponse {
  data: {
    children: Array<{
      data: RedditPost;
    }>;
    after?: string;
  };
}

interface FilterOptions {
  blockedSubreddits?: string[];
  favoriteSubreddits?: string[];
  keywords?: string[];
  blockedKeywords?: string[];
}

export default {
  async fetch(request: Request): Promise<Response> {
    // Handle CORS
    const corsHeaders = {
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
      "Access-Control-Allow-Headers": "Content-Type",
    };

    if (request.method === "OPTIONS") {
      return new Response(null, { headers: corsHeaders });
    }

    const url = new URL(request.url);
    const path = url.pathname;

    try {
      if (path === "/api/posts") {
        return await handleGetPosts(request, corsHeaders);
      } else if (path === "/api/subreddit") {
        return await handleGetSubreddit(request, corsHeaders);
      }

      return new Response("Not found", { status: 404, headers: corsHeaders });
    } catch (error) {
      console.error("Worker error:", error);
      return new Response("Internal server error", {
        status: 500,
        headers: corsHeaders,
      });
    }
  },
};

async function handleGetPosts(
  request: Request,
  corsHeaders: Record<string, string>
): Promise<Response> {
  const url = new URL(request.url);
  const subreddit = url.searchParams.get("subreddit") || "all";
  const sort = url.searchParams.get("sort") || "hot";
  const limit = url.searchParams.get("limit") || "25";
  const after = url.searchParams.get("after") || "";

  // Get filter options from request body or query params
  let filterOptions: FilterOptions = {};
  if (request.method === "POST") {
    try {
      const body = (await request.json()) as FilterOptions;
      filterOptions = body;
    } catch (error) {
      // Fallback to query params if body parsing fails
      console.error("Error parsing request body:", error);
    }
  }

  // Build Reddit API URL
  let redditUrl = `https://www.reddit.com/r/${subreddit}/${sort}.json?limit=${limit}`;
  if (after) {
    redditUrl += `&after=${after}`;
  }

  // Fetch from Reddit API
  const response = await fetch(redditUrl, {
    headers: {
      "User-Agent": "WReddit/1.0.0",
    },
  });

  if (!response.ok) {
    throw new Error(`Reddit API error: ${response.status}`);
  }

  const data: RedditResponse = await response.json();

  // Filter posts based on user preferences
  const filteredPosts = filterPosts(
    data.data.children.map((child) => child.data),
    filterOptions
  );

  const result = {
    posts: filteredPosts,
    after: data.data.after,
  };

  return new Response(JSON.stringify(result), {
    headers: {
      "Content-Type": "application/json",
      ...corsHeaders,
    },
  });
}

async function handleGetSubreddit(
  request: Request,
  corsHeaders: Record<string, string>
): Promise<Response> {
  const url = new URL(request.url);
  const subredditName = url.searchParams.get("name");

  if (!subredditName) {
    return new Response("Subreddit name is required", {
      status: 400,
      headers: corsHeaders,
    });
  }

  // Fetch subreddit info
  const response = await fetch(
    `https://www.reddit.com/r/${subredditName}/about.json`,
    {
      headers: {
        "User-Agent": "WReddit/1.0.0",
      },
    }
  );

  if (!response.ok) {
    return new Response("Subreddit not found", {
      status: 404,
      headers: corsHeaders,
    });
  }

  const data = await response.json<
    RedditResponse & { data: { children: Array<{ data: RedditPost }> } }
  >();

  return new Response(JSON.stringify(data.data), {
    headers: {
      "Content-Type": "application/json",
      ...corsHeaders,
    },
  });
}

function filterPosts(
  posts: RedditPost[],
  options: FilterOptions
): RedditPost[] {
  return posts.filter((post) => {
    // Filter out blocked subreddits
    if (options.blockedSubreddits?.includes(post.subreddit.toLowerCase())) {
      return false;
    }

    // If favorite subreddits are specified, only show those
    if (options.favoriteSubreddits && options.favoriteSubreddits.length > 0) {
      if (!options.favoriteSubreddits.includes(post.subreddit.toLowerCase())) {
        return false;
      }
    }

    // Filter out posts with blocked keywords
    if (options.blockedKeywords && options.blockedKeywords.length > 0) {
      const postText = `${post.title} ${post.selftext || ""}`.toLowerCase();
      const hasBlockedKeyword = options.blockedKeywords.some((keyword) =>
        postText.includes(keyword.toLowerCase())
      );
      if (hasBlockedKeyword) {
        return false;
      }
    }

    // Filter for specific keywords (if specified)
    if (options.keywords && options.keywords.length > 0) {
      const postText = `${post.title} ${post.selftext || ""}`.toLowerCase();
      const hasKeyword = options.keywords.some((keyword) =>
        postText.includes(keyword.toLowerCase())
      );
      if (!hasKeyword) {
        return false;
      }
    }

    return true;
  });
}
</file>

<file path="workers/reddit-api/package.json">
{
  "name": "reddit-api-worker",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "deploy": "wrangler deploy",
    "dev": "wrangler dev",
    "start": "wrangler dev"
  },
  "devDependencies": {
    "@cloudflare/workers-types": "^4.20240909.0",
    "wrangler": "^3.0.0"
  }
}
</file>

<file path="workers/reddit-api/tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2022"],
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": true,
    "allowJs": true,
    "strict": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "types": ["@cloudflare/workers-types"]
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules"]
}
</file>

<file path="workers/reddit-api/wrangler.toml">
name = "reddit-api-worker"
main = "src/index.ts"
compatibility_date = "2024-06-16"
compatibility_flags = ["nodejs_compat"]

[vars]
REDDIT_USER_AGENT = "WReddit/1.0.0"

[env.production]
name = "reddit-api-worker"

[env.staging]
name = "reddit-api-worker-staging"
</file>

<file path=".env.example">
VITE_WORKER_URL=http://localhost:8787
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config({
  extends: [
    // Remove ...tseslint.configs.recommended and replace with this
    ...tseslint.configs.recommendedTypeChecked,
    // Alternatively, use this for stricter rules
    ...tseslint.configs.strictTypeChecked,
    // Optionally, add this for stylistic rules
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config({
  plugins: {
    // Add the react-x and react-dom plugins
    'react-x': reactX,
    'react-dom': reactDom,
  },
  rules: {
    // other rules...
    // Enable its recommended typescript rules
    ...reactX.configs['recommended-typescript'].rules,
    ...reactDom.configs.recommended.rules,
  },
})
```
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="src/App.tsx">
import WReddit from "./components/WReddit";

function App() {
  return <WReddit />;
}

export default App;
</file>

<file path="src/index.css">
@import "tailwindcss";
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
.env
</file>

<file path="package.json">
{
  "name": "wreddit",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@tailwindcss/vite": "^4.1.10",
    "lucide-react": "^0.515.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "tailwindcss": "^4.1.10"
  },
  "devDependencies": {
    "@eslint/js": "^9.25.0",
    "@types/react": "^19.1.2",
    "@types/react-dom": "^19.1.2",
    "@vitejs/plugin-react": "^4.4.1",
    "eslint": "^9.25.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.30.1",
    "vite": "^6.3.5"
  }
}
</file>

<file path="vite.config.ts">
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import tailwindcss from "@tailwindcss/vite";

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
});
</file>

<file path="src/components/WReddit.tsx">
import { useState, useEffect, useCallback } from "react";
import { Search, RefreshCw, Settings } from "lucide-react";

import {
  getFilters,
  saveFilters,
  getSubreddit,
  saveSubreddit,
  getSort,
  saveSort,
} from "../utils/storage";

import PostDetail from "./PostDetail";
import SettingsModal from "./SettingsModal";
import PostFeed from "./PostFeed";
import type { FilterOptions, PostsApiResponse, RedditPost } from "../types";

const WORKER_URL = import.meta.env.VITE_WORKER_URL;

export default function WReddit() {
  const [posts, setPosts] = useState<RedditPost[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [after, setAfter] = useState<string | null>(null);
  const [showSettings, setShowSettings] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedPost, setSelectedPost] = useState<RedditPost | null>(null);

  const [subreddit, setSubreddit] = useState(() => getSubreddit());
  const [sort, setSort] = useState(() => getSort());
  const [filters, setFilters] = useState<FilterOptions>(() => getFilters());

  useEffect(() => {
    saveFilters(filters);
  }, [filters]);

  useEffect(() => {
    saveSubreddit(subreddit);
  }, [subreddit]);

  useEffect(() => {
    saveSort(sort);
  }, [sort]);

  const fetchPosts = useCallback(
    async (reset = false) => {
      try {
        setLoading(true);
        setError(null);

        const url = new URL(`${WORKER_URL}/api/posts`);
        url.searchParams.append("subreddit", subreddit);
        url.searchParams.append("sort", sort);
        url.searchParams.append("limit", "25");
        if (!reset && after) {
          url.searchParams.append("after", after);
        }

        const response = await fetch(url.toString(), {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(filters),
        });

        if (!response.ok) {
          throw new Error("Failed to fetch posts");
        }

        const data: PostsApiResponse = await response.json();

        if (reset) {
          setPosts(data.posts);
        } else {
          setPosts((prev) => [...prev, ...data.posts]);
        }

        setAfter(data.after || null);
      } catch (err) {
        setError(err instanceof Error ? err.message : "An error occurred");
      } finally {
        setLoading(false);
      }
    },
    [subreddit, sort, after, filters]
  );

  useEffect(() => {
    fetchPosts(true);
  }, [subreddit, sort, filters, fetchPosts]);

  const filteredPosts = posts.filter((post) => {
    if (!searchTerm) return true;
    return (
      post.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      post.subreddit.toLowerCase().includes(searchTerm.toLowerCase())
    );
  });

  // If a post is selected, show the detail view
  if (selectedPost) {
    return (
      <PostDetail post={selectedPost} onBack={() => setSelectedPost(null)} />
    );
  }

  return (
    <div className="min-h-screen bg-black text-white">
      {/* Header */}
      <header className="sticky top-0 bg-black/90 backdrop-blur-md border-b border-gray-800 z-10">
        <div className="flex items-center justify-between p-3">
          <h1 className="text-2xl font-bold text-orange-500">WReddit</h1>
          <div className="flex items-center gap-1">
            <button
              onClick={() => setShowSettings(true)}
              className="p-2 text-gray-400 hover:text-white transition-colors rounded-full hover:bg-gray-800"
            >
              <Settings size={22} />
            </button>
            <button
              onClick={() => fetchPosts(true)}
              className="p-2 text-gray-400 hover:text-white transition-colors rounded-full hover:bg-gray-800"
              disabled={loading}
            >
              <RefreshCw size={22} className={loading ? "animate-spin" : ""} />
            </button>
          </div>
        </div>

        {/* Search and Controls */}
        <div className="px-3 pb-3 space-y-3">
          {/* Search Bar */}
          <div className="relative">
            <Search
              className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500"
              size={18}
            />
            <input
              type="text"
              placeholder="Search posts..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-10 pr-4 py-2.5 bg-gray-900 border border-gray-700 rounded-xl text-white placeholder-gray-500 focus:outline-none focus:border-orange-500 text-sm"
            />
          </div>

          {/* Subreddit and Sort Controls */}
          <div className="flex gap-2">
            <select
              value={subreddit}
              onChange={(e) => setSubreddit(e.target.value)}
              className="flex-1 px-3 py-2 bg-gray-900 border border-gray-700 rounded-xl text-white focus:outline-none focus:border-orange-500 text-sm"
            >
              <option value="all">All</option>
              <option value="popular">Popular</option>
              {filters.favoriteSubreddits.map((sub) => (
                <option key={sub} value={sub}>
                  {sub}
                </option>
              ))}
            </select>
            <select
              value={sort}
              onChange={(e) => setSort(e.target.value)}
              className="px-3 py-2 bg-gray-900 border border-gray-700 rounded-xl text-white focus:outline-none focus:border-orange-500 text-sm"
            >
              <option value="hot">Hot</option>
              <option value="new">New</option>
              <option value="top">Top</option>
              <option value="rising">Rising</option>
            </select>
          </div>
        </div>
      </header>

      {/* Settings Modal */}
      <SettingsModal
        isOpen={showSettings}
        onClose={() => setShowSettings(false)}
        filters={filters}
        onFiltersChange={setFilters}
      />

      {/* Posts Feed */}
      <main className="pb-4">
        {error && (
          <div className="p-4 bg-red-900/20 border border-red-700/40 text-red-400 mx-3 mt-4 rounded-xl">
            {error}
          </div>
        )}

        <PostFeed posts={filteredPosts} onPostClick={setSelectedPost} />

        {/* Load More Button */}
        {after && !loading && (
          <div className="p-4">
            <button
              onClick={() => fetchPosts(false)}
              className="w-full py-3 bg-gradient-to-r from-orange-600 to-red-600 text-white rounded-xl hover:from-orange-700 hover:to-red-700 transition-all duration-200 font-medium"
            >
              Load More Posts
            </button>
          </div>
        )}

        {/* Loading indicator */}
        {loading && (
          <div className="flex justify-center p-8">
            <RefreshCw size={24} className="animate-spin text-orange-500" />
          </div>
        )}
      </main>
    </div>
  );
}
</file>

</files>
